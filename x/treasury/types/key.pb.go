// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/treasury/key.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// KeyRequestStatus indicates the status of a key request.
// A request starts as "pending", waiting to be picked up. Then it can move to
// either "approved" or "rejected", depending on the decision of the MPC nodes.
type KeyRequestStatus int32

const (
	// The request is missing the status field.
	KeyRequestStatus_KEY_REQUEST_STATUS_UNSPECIFIED KeyRequestStatus = 0
	// The request is waiting to be fulfilled. This is the initial state of a
	// request.
	KeyRequestStatus_KEY_REQUEST_STATUS_PENDING KeyRequestStatus = 1
	// The request is partially fulfilled - at least one more response from
	// a different MPC party is needed to confirm it.
	KeyRequestStatus_KEY_REQUEST_STATUS_PARTIAL KeyRequestStatus = 2
	// The request was fulfilled. This is a final state for a request.
	KeyRequestStatus_KEY_REQUEST_STATUS_FULFILLED KeyRequestStatus = 3
	// The request was rejected. This is a final state for a request.
	KeyRequestStatus_KEY_REQUEST_STATUS_REJECTED KeyRequestStatus = 4
)

var KeyRequestStatus_name = map[int32]string{
	0: "KEY_REQUEST_STATUS_UNSPECIFIED",
	1: "KEY_REQUEST_STATUS_PENDING",
	2: "KEY_REQUEST_STATUS_PARTIAL",
	3: "KEY_REQUEST_STATUS_FULFILLED",
	4: "KEY_REQUEST_STATUS_REJECTED",
}

var KeyRequestStatus_value = map[string]int32{
	"KEY_REQUEST_STATUS_UNSPECIFIED": 0,
	"KEY_REQUEST_STATUS_PENDING":     1,
	"KEY_REQUEST_STATUS_PARTIAL":     2,
	"KEY_REQUEST_STATUS_FULFILLED":   3,
	"KEY_REQUEST_STATUS_REJECTED":    4,
}

func (x KeyRequestStatus) String() string {
	return proto.EnumName(KeyRequestStatus_name, int32(x))
}

func (KeyRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4fe3d9b67a5056f9, []int{0}
}

// KeyType indicates what crypto key algo will be used by this key (e.g. ECDSA
// with secp256k1 curve). Its public key will be one of the specified type.
type KeyType int32

const (
	// The key type is missing.
	KeyType_KEY_TYPE_UNSPECIFIED KeyType = 0
	// The key is an ECDSA secp256k1 key.
	KeyType_KEY_TYPE_ECDSA_SECP256K1 KeyType = 1
	// The key is an EdDSA Ed25519 key.
	KeyType_KEY_TYPE_EDDSA_ED25519 KeyType = 2
	// Standard Bitcoin Keys
	KeyType_KEY_TYPE_BITCOIN_SECP256K1 KeyType = 3
)

var KeyType_name = map[int32]string{
	0: "KEY_TYPE_UNSPECIFIED",
	1: "KEY_TYPE_ECDSA_SECP256K1",
	2: "KEY_TYPE_EDDSA_ED25519",
	3: "KEY_TYPE_BITCOIN_SECP256K1",
}

var KeyType_value = map[string]int32{
	"KEY_TYPE_UNSPECIFIED":       0,
	"KEY_TYPE_ECDSA_SECP256K1":   1,
	"KEY_TYPE_EDDSA_ED25519":     2,
	"KEY_TYPE_BITCOIN_SECP256K1": 3,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4fe3d9b67a5056f9, []int{1}
}

// format of a key request
type KeyRequest struct {
	Id                     uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator                string           `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	WorkspaceAddr          string           `protobuf:"bytes,3,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	KeyringAddr            string           `protobuf:"bytes,4,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	KeyType                KeyType          `protobuf:"varint,5,opt,name=key_type,json=keyType,proto3,enum=zrchain.treasury.KeyType" json:"key_type,omitempty"`
	Status                 KeyRequestStatus `protobuf:"varint,6,opt,name=status,proto3,enum=zrchain.treasury.KeyRequestStatus" json:"status,omitempty"`
	KeyringPartySignatures [][]byte         `protobuf:"bytes,7,rep,name=keyring_party_signatures,json=keyringPartySignatures,proto3" json:"keyring_party_signatures,omitempty"`
	RejectReason           string           `protobuf:"bytes,8,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Index                  uint64           `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
	SignPolicyId           uint64           `protobuf:"varint,10,opt,name=sign_policy_id,json=signPolicyId,proto3" json:"sign_policy_id,omitempty"`
	ZenbtcMetadata         *ZenBTCMetadata  `protobuf:"bytes,11,opt,name=zenbtc_metadata,json=zenbtcMetadata,proto3" json:"zenbtc_metadata,omitempty"`
}

func (m *KeyRequest) Reset()         { *m = KeyRequest{} }
func (m *KeyRequest) String() string { return proto.CompactTextString(m) }
func (*KeyRequest) ProtoMessage()    {}
func (*KeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fe3d9b67a5056f9, []int{0}
}
func (m *KeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyRequest.Merge(m, src)
}
func (m *KeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *KeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KeyRequest proto.InternalMessageInfo

func (m *KeyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *KeyRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *KeyRequest) GetWorkspaceAddr() string {
	if m != nil {
		return m.WorkspaceAddr
	}
	return ""
}

func (m *KeyRequest) GetKeyringAddr() string {
	if m != nil {
		return m.KeyringAddr
	}
	return ""
}

func (m *KeyRequest) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (m *KeyRequest) GetStatus() KeyRequestStatus {
	if m != nil {
		return m.Status
	}
	return KeyRequestStatus_KEY_REQUEST_STATUS_UNSPECIFIED
}

func (m *KeyRequest) GetKeyringPartySignatures() [][]byte {
	if m != nil {
		return m.KeyringPartySignatures
	}
	return nil
}

func (m *KeyRequest) GetRejectReason() string {
	if m != nil {
		return m.RejectReason
	}
	return ""
}

func (m *KeyRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *KeyRequest) GetSignPolicyId() uint64 {
	if m != nil {
		return m.SignPolicyId
	}
	return 0
}

func (m *KeyRequest) GetZenbtcMetadata() *ZenBTCMetadata {
	if m != nil {
		return m.ZenbtcMetadata
	}
	return nil
}

// format of a key request response
type KeyReqResponse struct {
	Id                     uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator                string          `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	WorkspaceAddr          string          `protobuf:"bytes,3,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	KeyringAddr            string          `protobuf:"bytes,4,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	KeyType                string          `protobuf:"bytes,5,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	Status                 string          `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	KeyringPartySignatures [][]byte        `protobuf:"bytes,7,rep,name=keyring_party_signatures,json=keyringPartySignatures,proto3" json:"keyring_party_signatures,omitempty"`
	RejectReason           string          `protobuf:"bytes,8,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Index                  uint64          `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
	SignPolicyId           uint64          `protobuf:"varint,10,opt,name=sign_policy_id,json=signPolicyId,proto3" json:"sign_policy_id,omitempty"`
	ZenbtcMetadata         *ZenBTCMetadata `protobuf:"bytes,11,opt,name=zenbtc_metadata,json=zenbtcMetadata,proto3" json:"zenbtc_metadata,omitempty"`
}

func (m *KeyReqResponse) Reset()         { *m = KeyReqResponse{} }
func (m *KeyReqResponse) String() string { return proto.CompactTextString(m) }
func (*KeyReqResponse) ProtoMessage()    {}
func (*KeyReqResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fe3d9b67a5056f9, []int{1}
}
func (m *KeyReqResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyReqResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyReqResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyReqResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyReqResponse.Merge(m, src)
}
func (m *KeyReqResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeyReqResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyReqResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyReqResponse proto.InternalMessageInfo

func (m *KeyReqResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *KeyReqResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *KeyReqResponse) GetWorkspaceAddr() string {
	if m != nil {
		return m.WorkspaceAddr
	}
	return ""
}

func (m *KeyReqResponse) GetKeyringAddr() string {
	if m != nil {
		return m.KeyringAddr
	}
	return ""
}

func (m *KeyReqResponse) GetKeyType() string {
	if m != nil {
		return m.KeyType
	}
	return ""
}

func (m *KeyReqResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *KeyReqResponse) GetKeyringPartySignatures() [][]byte {
	if m != nil {
		return m.KeyringPartySignatures
	}
	return nil
}

func (m *KeyReqResponse) GetRejectReason() string {
	if m != nil {
		return m.RejectReason
	}
	return ""
}

func (m *KeyReqResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *KeyReqResponse) GetSignPolicyId() uint64 {
	if m != nil {
		return m.SignPolicyId
	}
	return 0
}

func (m *KeyReqResponse) GetZenbtcMetadata() *ZenBTCMetadata {
	if m != nil {
		return m.ZenbtcMetadata
	}
	return nil
}

// format of a key
type Key struct {
	Id             uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceAddr  string          `protobuf:"bytes,2,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	KeyringAddr    string          `protobuf:"bytes,3,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	Type           KeyType         `protobuf:"varint,4,opt,name=type,proto3,enum=zrchain.treasury.KeyType" json:"type,omitempty"`
	PublicKey      []byte          `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Index          uint64          `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
	SignPolicyId   uint64          `protobuf:"varint,10,opt,name=sign_policy_id,json=signPolicyId,proto3" json:"sign_policy_id,omitempty"`
	ZenbtcMetadata *ZenBTCMetadata `protobuf:"bytes,11,opt,name=zenbtc_metadata,json=zenbtcMetadata,proto3" json:"zenbtc_metadata,omitempty"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fe3d9b67a5056f9, []int{2}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Key.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return m.Size()
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Key) GetWorkspaceAddr() string {
	if m != nil {
		return m.WorkspaceAddr
	}
	return ""
}

func (m *Key) GetKeyringAddr() string {
	if m != nil {
		return m.KeyringAddr
	}
	return ""
}

func (m *Key) GetType() KeyType {
	if m != nil {
		return m.Type
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (m *Key) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Key) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Key) GetSignPolicyId() uint64 {
	if m != nil {
		return m.SignPolicyId
	}
	return 0
}

func (m *Key) GetZenbtcMetadata() *ZenBTCMetadata {
	if m != nil {
		return m.ZenbtcMetadata
	}
	return nil
}

// format of a key response
type KeyResponse struct {
	Id             uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceAddr  string          `protobuf:"bytes,2,opt,name=workspace_addr,json=workspaceAddr,proto3" json:"workspace_addr,omitempty"`
	KeyringAddr    string          `protobuf:"bytes,3,opt,name=keyring_addr,json=keyringAddr,proto3" json:"keyring_addr,omitempty"`
	Type           string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	PublicKey      []byte          `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Index          uint64          `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`
	SignPolicyId   uint64          `protobuf:"varint,10,opt,name=sign_policy_id,json=signPolicyId,proto3" json:"sign_policy_id,omitempty"`
	ZenbtcMetadata *ZenBTCMetadata `protobuf:"bytes,11,opt,name=zenbtc_metadata,json=zenbtcMetadata,proto3" json:"zenbtc_metadata,omitempty"`
}

func (m *KeyResponse) Reset()         { *m = KeyResponse{} }
func (m *KeyResponse) String() string { return proto.CompactTextString(m) }
func (*KeyResponse) ProtoMessage()    {}
func (*KeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fe3d9b67a5056f9, []int{3}
}
func (m *KeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyResponse.Merge(m, src)
}
func (m *KeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *KeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_KeyResponse proto.InternalMessageInfo

func (m *KeyResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *KeyResponse) GetWorkspaceAddr() string {
	if m != nil {
		return m.WorkspaceAddr
	}
	return ""
}

func (m *KeyResponse) GetKeyringAddr() string {
	if m != nil {
		return m.KeyringAddr
	}
	return ""
}

func (m *KeyResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *KeyResponse) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *KeyResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *KeyResponse) GetSignPolicyId() uint64 {
	if m != nil {
		return m.SignPolicyId
	}
	return 0
}

func (m *KeyResponse) GetZenbtcMetadata() *ZenBTCMetadata {
	if m != nil {
		return m.ZenbtcMetadata
	}
	return nil
}

// ZenBTCMetadata is the metadata for a key on the zenBTC keyring.
type ZenBTCMetadata struct {
	RecipientAddr string     `protobuf:"bytes,1,opt,name=recipient_addr,json=recipientAddr,proto3" json:"recipient_addr,omitempty"`
	ChainType     WalletType `protobuf:"varint,2,opt,name=chain_type,json=chainType,proto3,enum=zrchain.treasury.WalletType" json:"chain_type,omitempty"`
	ChainId       uint64     `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ReturnAddress string     `protobuf:"bytes,4,opt,name=return_address,json=returnAddress,proto3" json:"return_address,omitempty"`
}

func (m *ZenBTCMetadata) Reset()         { *m = ZenBTCMetadata{} }
func (m *ZenBTCMetadata) String() string { return proto.CompactTextString(m) }
func (*ZenBTCMetadata) ProtoMessage()    {}
func (*ZenBTCMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fe3d9b67a5056f9, []int{4}
}
func (m *ZenBTCMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZenBTCMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZenBTCMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZenBTCMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZenBTCMetadata.Merge(m, src)
}
func (m *ZenBTCMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ZenBTCMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ZenBTCMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ZenBTCMetadata proto.InternalMessageInfo

func (m *ZenBTCMetadata) GetRecipientAddr() string {
	if m != nil {
		return m.RecipientAddr
	}
	return ""
}

func (m *ZenBTCMetadata) GetChainType() WalletType {
	if m != nil {
		return m.ChainType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *ZenBTCMetadata) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *ZenBTCMetadata) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

// PendingMintTransaction is the metadata for a pending zenBTC mint transaction.
type PendingMintTransaction struct {
	ChainId          uint64     `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ChainType        WalletType `protobuf:"varint,2,opt,name=chain_type,json=chainType,proto3,enum=zrchain.treasury.WalletType" json:"chain_type,omitempty"`
	RecipientAddress string     `protobuf:"bytes,3,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	Amount           uint64     `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Creator          string     `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId            uint64     `protobuf:"varint,6,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (m *PendingMintTransaction) Reset()         { *m = PendingMintTransaction{} }
func (m *PendingMintTransaction) String() string { return proto.CompactTextString(m) }
func (*PendingMintTransaction) ProtoMessage()    {}
func (*PendingMintTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fe3d9b67a5056f9, []int{5}
}
func (m *PendingMintTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingMintTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingMintTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingMintTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingMintTransaction.Merge(m, src)
}
func (m *PendingMintTransaction) XXX_Size() int {
	return m.Size()
}
func (m *PendingMintTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingMintTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_PendingMintTransaction proto.InternalMessageInfo

func (m *PendingMintTransaction) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PendingMintTransaction) GetChainType() WalletType {
	if m != nil {
		return m.ChainType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *PendingMintTransaction) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *PendingMintTransaction) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PendingMintTransaction) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PendingMintTransaction) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

type PendingMintTransactions struct {
	Txs []*PendingMintTransaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *PendingMintTransactions) Reset()         { *m = PendingMintTransactions{} }
func (m *PendingMintTransactions) String() string { return proto.CompactTextString(m) }
func (*PendingMintTransactions) ProtoMessage()    {}
func (*PendingMintTransactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fe3d9b67a5056f9, []int{6}
}
func (m *PendingMintTransactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingMintTransactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingMintTransactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingMintTransactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingMintTransactions.Merge(m, src)
}
func (m *PendingMintTransactions) XXX_Size() int {
	return m.Size()
}
func (m *PendingMintTransactions) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingMintTransactions.DiscardUnknown(m)
}

var xxx_messageInfo_PendingMintTransactions proto.InternalMessageInfo

func (m *PendingMintTransactions) GetTxs() []*PendingMintTransaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func init() {
	proto.RegisterEnum("zrchain.treasury.KeyRequestStatus", KeyRequestStatus_name, KeyRequestStatus_value)
	proto.RegisterEnum("zrchain.treasury.KeyType", KeyType_name, KeyType_value)
	proto.RegisterType((*KeyRequest)(nil), "zrchain.treasury.KeyRequest")
	proto.RegisterType((*KeyReqResponse)(nil), "zrchain.treasury.KeyReqResponse")
	proto.RegisterType((*Key)(nil), "zrchain.treasury.Key")
	proto.RegisterType((*KeyResponse)(nil), "zrchain.treasury.KeyResponse")
	proto.RegisterType((*ZenBTCMetadata)(nil), "zrchain.treasury.ZenBTCMetadata")
	proto.RegisterType((*PendingMintTransaction)(nil), "zrchain.treasury.PendingMintTransaction")
	proto.RegisterType((*PendingMintTransactions)(nil), "zrchain.treasury.PendingMintTransactions")
}

func init() { proto.RegisterFile("zrchain/treasury/key.proto", fileDescriptor_4fe3d9b67a5056f9) }

var fileDescriptor_4fe3d9b67a5056f9 = []byte{
	// 889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0x51, 0x6f, 0xe3, 0x44,
	0x10, 0xae, 0xed, 0xb4, 0xb9, 0x4c, 0xd2, 0x60, 0x56, 0x47, 0x71, 0x4b, 0x2f, 0x84, 0x00, 0x52,
	0x74, 0xe8, 0x12, 0x5d, 0xb8, 0x22, 0xee, 0x78, 0x4a, 0x13, 0x17, 0x99, 0xf4, 0x4a, 0xb0, 0x1d,
	0xa1, 0xeb, 0x8b, 0xe5, 0xda, 0xab, 0xde, 0x92, 0x76, 0x6d, 0x76, 0xd7, 0x5c, 0x7d, 0x12, 0xff,
	0x81, 0x3f, 0xc0, 0x03, 0xff, 0x01, 0x21, 0xf1, 0x0f, 0x78, 0xbc, 0xc7, 0x7b, 0x44, 0xad, 0xc4,
	0xef, 0x40, 0x5e, 0x3b, 0x6d, 0xd3, 0xe4, 0x04, 0x12, 0x48, 0x80, 0x78, 0xcb, 0xce, 0xf7, 0x4d,
	0x66, 0xe6, 0x9b, 0xd9, 0xf1, 0xc2, 0xd6, 0x73, 0x16, 0x3c, 0xf5, 0x09, 0xed, 0x0a, 0x86, 0x7d,
	0x9e, 0xb0, 0xb4, 0x3b, 0xc5, 0x69, 0x27, 0x66, 0x91, 0x88, 0x90, 0x5e, 0x60, 0x9d, 0x19, 0xb6,
	0x75, 0x67, 0x81, 0xfd, 0xcc, 0x3f, 0x39, 0xc1, 0x22, 0x77, 0x68, 0xbd, 0xd4, 0x00, 0x46, 0x38,
	0xb5, 0xf1, 0xd7, 0x09, 0xe6, 0x02, 0xd5, 0x41, 0x25, 0xa1, 0xa1, 0x34, 0x95, 0x76, 0xc9, 0x56,
	0x49, 0x88, 0x0c, 0x28, 0x07, 0x0c, 0xfb, 0x22, 0x62, 0x86, 0xda, 0x54, 0xda, 0x15, 0x7b, 0x76,
	0x44, 0xef, 0x43, 0xfd, 0x59, 0xc4, 0xa6, 0x3c, 0xf6, 0x03, 0xec, 0xf9, 0x61, 0xc8, 0x0c, 0x4d,
	0x12, 0xd6, 0x2f, 0xad, 0xfd, 0x30, 0x64, 0xe8, 0x1d, 0xa8, 0x4d, 0x71, 0xca, 0x08, 0x3d, 0xce,
	0x49, 0x25, 0x49, 0xaa, 0x16, 0x36, 0x49, 0x79, 0x00, 0xb7, 0xa6, 0x38, 0xf5, 0x44, 0x1a, 0x63,
	0x63, 0xb5, 0xa9, 0xb4, 0xeb, 0xbd, 0xcd, 0xce, 0xcd, 0x32, 0x3a, 0x23, 0x9c, 0xba, 0x69, 0x8c,
	0xed, 0xf2, 0x34, 0xff, 0x81, 0x1e, 0xc1, 0x1a, 0x17, 0xbe, 0x48, 0xb8, 0xb1, 0x26, 0x7d, 0x5a,
	0x4b, 0x7d, 0x8a, 0xba, 0x1c, 0xc9, 0xb4, 0x0b, 0x0f, 0xf4, 0x31, 0x18, 0xb3, 0xa4, 0x62, 0x9f,
	0x89, 0xd4, 0xe3, 0xe4, 0x98, 0xfa, 0x22, 0x61, 0x98, 0x1b, 0xe5, 0xa6, 0xd6, 0xae, 0xd9, 0x1b,
	0x05, 0x3e, 0xce, 0x60, 0xe7, 0x12, 0x45, 0xef, 0xc2, 0x3a, 0xc3, 0x5f, 0xe1, 0x40, 0x78, 0x59,
	0x90, 0x88, 0x1a, 0xb7, 0x64, 0x3d, 0xb5, 0xdc, 0x68, 0x4b, 0x1b, 0xba, 0x0d, 0xab, 0x84, 0x86,
	0xf8, 0xcc, 0xa8, 0x48, 0x1d, 0xf3, 0x03, 0x7a, 0x0f, 0xea, 0x59, 0x18, 0x2f, 0x8e, 0x4e, 0x48,
	0x90, 0x7a, 0x24, 0x34, 0x40, 0xc2, 0xb5, 0xcc, 0x3a, 0x96, 0x46, 0x2b, 0x44, 0x16, 0xbc, 0xf6,
	0x1c, 0xd3, 0x23, 0x11, 0x78, 0xa7, 0x58, 0xf8, 0xa1, 0x2f, 0x7c, 0xa3, 0xda, 0x54, 0xda, 0xd5,
	0x5e, 0x73, 0xb1, 0xbe, 0x43, 0x4c, 0x77, 0xdd, 0xc1, 0xe3, 0x82, 0x67, 0xd7, 0x73, 0xc7, 0xd9,
	0xb9, 0xf5, 0xbd, 0x06, 0xf5, 0x5c, 0x02, 0x1b, 0xf3, 0x38, 0xa2, 0x1c, 0xff, 0x23, 0xed, 0xdd,
	0xbc, 0xd1, 0xde, 0xca, 0x55, 0x0f, 0x37, 0xe6, 0x7a, 0x58, 0xf9, 0x9f, 0xf5, 0xe7, 0x47, 0x15,
	0xb4, 0x11, 0x4e, 0x17, 0x9a, 0xb2, 0x28, 0xbd, 0xfa, 0x67, 0xa4, 0xd7, 0x16, 0xa5, 0xbf, 0x07,
	0x25, 0x29, 0x7b, 0xe9, 0x8f, 0x6e, 0x95, 0xa4, 0xa1, 0x3b, 0x00, 0x71, 0x72, 0x74, 0x42, 0x02,
	0x6f, 0x8a, 0x53, 0xd9, 0xab, 0x9a, 0x5d, 0xc9, 0x2d, 0x59, 0x9e, 0xff, 0x12, 0xd9, 0x7e, 0x50,
	0xa1, 0x2a, 0xc7, 0xfa, 0x15, 0x33, 0xfd, 0xf7, 0xc9, 0x87, 0xae, 0xc9, 0x57, 0xf9, 0x4f, 0x69,
	0xf4, 0x93, 0x02, 0xf5, 0x79, 0x4a, 0x26, 0x0b, 0xc3, 0x01, 0x89, 0x09, 0xa6, 0x22, 0xaf, 0x58,
	0xc9, 0x65, 0xb9, 0xb4, 0xca, 0x9a, 0x3f, 0x01, 0x90, 0xa1, 0xf2, 0xfb, 0xaa, 0xca, 0xc1, 0xd9,
	0x5e, 0x8c, 0xff, 0xa5, 0xfc, 0x86, 0xc8, 0xd9, 0xa9, 0x48, 0x48, 0xde, 0xe7, 0x4d, 0xb8, 0x95,
	0x3b, 0x93, 0x50, 0xea, 0x59, 0xb2, 0xcb, 0xf2, 0x6c, 0x85, 0x79, 0x78, 0x91, 0x30, 0x2a, 0x63,
	0x63, 0xce, 0x0b, 0x55, 0xd7, 0x73, 0x6b, 0x3f, 0x37, 0xb6, 0x7e, 0x53, 0x60, 0x63, 0x8c, 0x69,
	0x48, 0xe8, 0xf1, 0x63, 0x42, 0x85, 0xcb, 0x7c, 0xca, 0xfd, 0x40, 0x90, 0x88, 0xce, 0xfd, 0xb9,
	0x32, 0xff, 0xe7, 0x7f, 0x29, 0xe9, 0x0f, 0xe0, 0xf5, 0x79, 0x61, 0xb2, 0xe4, 0xf2, 0x69, 0xd0,
	0xe7, 0xb4, 0xc1, 0x9c, 0x67, 0x1b, 0xcb, 0x3f, 0x8d, 0x12, 0x2a, 0x64, 0xfa, 0x25, 0xbb, 0x38,
	0x5d, 0x5f, 0xa4, 0xab, 0xf3, 0x8b, 0xf4, 0x0d, 0x58, 0xcb, 0xd6, 0x1f, 0x09, 0xe5, 0x8e, 0x2b,
	0xd9, 0xab, 0x53, 0x9c, 0x5a, 0x61, 0x6b, 0x02, 0x6f, 0x2e, 0xaf, 0x93, 0xa3, 0x47, 0xa0, 0x89,
	0x33, 0x6e, 0x28, 0x4d, 0xad, 0x5d, 0xed, 0xb5, 0x17, 0xcb, 0x58, 0xee, 0x67, 0x67, 0x4e, 0x77,
	0x7f, 0x56, 0x40, 0xbf, 0xf9, 0xd9, 0x43, 0x2d, 0x68, 0x8c, 0xcc, 0x27, 0x9e, 0x6d, 0x7e, 0x31,
	0x31, 0x1d, 0xd7, 0x73, 0xdc, 0xbe, 0x3b, 0x71, 0xbc, 0xc9, 0x81, 0x33, 0x36, 0x07, 0xd6, 0x9e,
	0x65, 0x0e, 0xf5, 0x15, 0xd4, 0x80, 0xad, 0x25, 0x9c, 0xb1, 0x79, 0x30, 0xb4, 0x0e, 0x3e, 0xd5,
	0x95, 0x57, 0xe1, 0x7d, 0xdb, 0xb5, 0xfa, 0xfb, 0xba, 0x8a, 0x9a, 0xb0, 0xbd, 0x04, 0xdf, 0x9b,
	0xec, 0xef, 0x59, 0xfb, 0xfb, 0xe6, 0x50, 0xd7, 0xd0, 0xdb, 0xf0, 0xd6, 0x12, 0x86, 0x6d, 0x7e,
	0x66, 0x0e, 0x5c, 0x73, 0xa8, 0x97, 0xee, 0x7e, 0x0b, 0xe5, 0x62, 0x1f, 0x21, 0x03, 0x6e, 0x67,
	0x5c, 0xf7, 0xc9, 0xd8, 0xbc, 0x91, 0xe7, 0x36, 0x18, 0x97, 0x88, 0x39, 0x18, 0x3a, 0x7d, 0xcf,
	0x31, 0x07, 0xe3, 0xde, 0xce, 0x47, 0xa3, 0xfb, 0xba, 0x82, 0xb6, 0x60, 0xe3, 0x0a, 0x1d, 0x66,
	0xa8, 0x39, 0xec, 0xed, 0xec, 0xdc, 0x7f, 0xa8, 0xab, 0xb3, 0x0a, 0x24, 0xb6, 0x6b, 0xb9, 0x83,
	0xcf, 0xad, 0x83, 0x6b, 0xbe, 0xda, 0xae, 0xf3, 0xcb, 0x79, 0x43, 0x79, 0x71, 0xde, 0x50, 0x7e,
	0x3d, 0x6f, 0x28, 0xdf, 0x5d, 0x34, 0x56, 0x5e, 0x5c, 0x34, 0x56, 0x5e, 0x5e, 0x34, 0x56, 0x0e,
	0x1f, 0x1e, 0x13, 0xf1, 0x34, 0x39, 0xea, 0x04, 0xd1, 0x69, 0xf7, 0x10, 0x53, 0x16, 0x05, 0xd3,
	0x7b, 0x7b, 0x51, 0x42, 0x43, 0x3f, 0x13, 0xbe, 0x3b, 0x7b, 0x60, 0x7d, 0xf3, 0xa0, 0x7b, 0x76,
	0xf5, 0xca, 0xca, 0x46, 0x91, 0x1f, 0xad, 0xc9, 0x57, 0xd6, 0x87, 0xbf, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x1a, 0xff, 0x6b, 0xf6, 0xb4, 0x09, 0x00, 0x00,
}

func (m *KeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZenbtcMetadata != nil {
		{
			size, err := m.ZenbtcMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKey(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SignPolicyId != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.SignPolicyId))
		i--
		dAtA[i] = 0x50
	}
	if m.Index != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RejectReason) > 0 {
		i -= len(m.RejectReason)
		copy(dAtA[i:], m.RejectReason)
		i = encodeVarintKey(dAtA, i, uint64(len(m.RejectReason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KeyringPartySignatures) > 0 {
		for iNdEx := len(m.KeyringPartySignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyringPartySignatures[iNdEx])
			copy(dAtA[i:], m.KeyringPartySignatures[iNdEx])
			i = encodeVarintKey(dAtA, i, uint64(len(m.KeyringPartySignatures[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Status != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.KeyType != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x28
	}
	if len(m.KeyringAddr) > 0 {
		i -= len(m.KeyringAddr)
		copy(dAtA[i:], m.KeyringAddr)
		i = encodeVarintKey(dAtA, i, uint64(len(m.KeyringAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkspaceAddr) > 0 {
		i -= len(m.WorkspaceAddr)
		copy(dAtA[i:], m.WorkspaceAddr)
		i = encodeVarintKey(dAtA, i, uint64(len(m.WorkspaceAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintKey(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KeyReqResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyReqResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyReqResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZenbtcMetadata != nil {
		{
			size, err := m.ZenbtcMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKey(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SignPolicyId != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.SignPolicyId))
		i--
		dAtA[i] = 0x50
	}
	if m.Index != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RejectReason) > 0 {
		i -= len(m.RejectReason)
		copy(dAtA[i:], m.RejectReason)
		i = encodeVarintKey(dAtA, i, uint64(len(m.RejectReason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.KeyringPartySignatures) > 0 {
		for iNdEx := len(m.KeyringPartySignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyringPartySignatures[iNdEx])
			copy(dAtA[i:], m.KeyringPartySignatures[iNdEx])
			i = encodeVarintKey(dAtA, i, uint64(len(m.KeyringPartySignatures[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintKey(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.KeyType) > 0 {
		i -= len(m.KeyType)
		copy(dAtA[i:], m.KeyType)
		i = encodeVarintKey(dAtA, i, uint64(len(m.KeyType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KeyringAddr) > 0 {
		i -= len(m.KeyringAddr)
		copy(dAtA[i:], m.KeyringAddr)
		i = encodeVarintKey(dAtA, i, uint64(len(m.KeyringAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkspaceAddr) > 0 {
		i -= len(m.WorkspaceAddr)
		copy(dAtA[i:], m.WorkspaceAddr)
		i = encodeVarintKey(dAtA, i, uint64(len(m.WorkspaceAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintKey(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Key) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZenbtcMetadata != nil {
		{
			size, err := m.ZenbtcMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKey(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SignPolicyId != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.SignPolicyId))
		i--
		dAtA[i] = 0x50
	}
	if m.Index != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintKey(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.KeyringAddr) > 0 {
		i -= len(m.KeyringAddr)
		copy(dAtA[i:], m.KeyringAddr)
		i = encodeVarintKey(dAtA, i, uint64(len(m.KeyringAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkspaceAddr) > 0 {
		i -= len(m.WorkspaceAddr)
		copy(dAtA[i:], m.WorkspaceAddr)
		i = encodeVarintKey(dAtA, i, uint64(len(m.WorkspaceAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ZenbtcMetadata != nil {
		{
			size, err := m.ZenbtcMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKey(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.SignPolicyId != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.SignPolicyId))
		i--
		dAtA[i] = 0x50
	}
	if m.Index != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintKey(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintKey(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KeyringAddr) > 0 {
		i -= len(m.KeyringAddr)
		copy(dAtA[i:], m.KeyringAddr)
		i = encodeVarintKey(dAtA, i, uint64(len(m.KeyringAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkspaceAddr) > 0 {
		i -= len(m.WorkspaceAddr)
		copy(dAtA[i:], m.WorkspaceAddr)
		i = encodeVarintKey(dAtA, i, uint64(len(m.WorkspaceAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ZenBTCMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZenBTCMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZenBTCMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReturnAddress) > 0 {
		i -= len(m.ReturnAddress)
		copy(dAtA[i:], m.ReturnAddress)
		i = encodeVarintKey(dAtA, i, uint64(len(m.ReturnAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChainId != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainType != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RecipientAddr) > 0 {
		i -= len(m.RecipientAddr)
		copy(dAtA[i:], m.RecipientAddr)
		i = encodeVarintKey(dAtA, i, uint64(len(m.RecipientAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingMintTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingMintTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingMintTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyId != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintKey(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintKey(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainType != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.ChainType))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintKey(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingMintTransactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingMintTransactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingMintTransactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKey(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintKey(dAtA []byte, offset int, v uint64) int {
	offset -= sovKey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKey(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.WorkspaceAddr)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.KeyringAddr)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if m.KeyType != 0 {
		n += 1 + sovKey(uint64(m.KeyType))
	}
	if m.Status != 0 {
		n += 1 + sovKey(uint64(m.Status))
	}
	if len(m.KeyringPartySignatures) > 0 {
		for _, b := range m.KeyringPartySignatures {
			l = len(b)
			n += 1 + l + sovKey(uint64(l))
		}
	}
	l = len(m.RejectReason)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovKey(uint64(m.Index))
	}
	if m.SignPolicyId != 0 {
		n += 1 + sovKey(uint64(m.SignPolicyId))
	}
	if m.ZenbtcMetadata != nil {
		l = m.ZenbtcMetadata.Size()
		n += 1 + l + sovKey(uint64(l))
	}
	return n
}

func (m *KeyReqResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKey(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.WorkspaceAddr)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.KeyringAddr)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.KeyType)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if len(m.KeyringPartySignatures) > 0 {
		for _, b := range m.KeyringPartySignatures {
			l = len(b)
			n += 1 + l + sovKey(uint64(l))
		}
	}
	l = len(m.RejectReason)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovKey(uint64(m.Index))
	}
	if m.SignPolicyId != 0 {
		n += 1 + sovKey(uint64(m.SignPolicyId))
	}
	if m.ZenbtcMetadata != nil {
		l = m.ZenbtcMetadata.Size()
		n += 1 + l + sovKey(uint64(l))
	}
	return n
}

func (m *Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKey(uint64(m.Id))
	}
	l = len(m.WorkspaceAddr)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.KeyringAddr)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovKey(uint64(m.Type))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovKey(uint64(m.Index))
	}
	if m.SignPolicyId != 0 {
		n += 1 + sovKey(uint64(m.SignPolicyId))
	}
	if m.ZenbtcMetadata != nil {
		l = m.ZenbtcMetadata.Size()
		n += 1 + l + sovKey(uint64(l))
	}
	return n
}

func (m *KeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKey(uint64(m.Id))
	}
	l = len(m.WorkspaceAddr)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.KeyringAddr)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovKey(uint64(m.Index))
	}
	if m.SignPolicyId != 0 {
		n += 1 + sovKey(uint64(m.SignPolicyId))
	}
	if m.ZenbtcMetadata != nil {
		l = m.ZenbtcMetadata.Size()
		n += 1 + l + sovKey(uint64(l))
	}
	return n
}

func (m *ZenBTCMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecipientAddr)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if m.ChainType != 0 {
		n += 1 + sovKey(uint64(m.ChainType))
	}
	if m.ChainId != 0 {
		n += 1 + sovKey(uint64(m.ChainId))
	}
	l = len(m.ReturnAddress)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	return n
}

func (m *PendingMintTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovKey(uint64(m.ChainId))
	}
	if m.ChainType != 0 {
		n += 1 + sovKey(uint64(m.ChainType))
	}
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovKey(uint64(m.Amount))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovKey(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovKey(uint64(m.KeyId))
	}
	return n
}

func (m *PendingMintTransactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovKey(uint64(l))
		}
	}
	return n
}

func sovKey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKey(x uint64) (n int) {
	return sovKey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= KeyRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySignatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringPartySignatures = append(m.KeyringPartySignatures, make([]byte, postIndex-iNdEx))
			copy(m.KeyringPartySignatures[len(m.KeyringPartySignatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPolicyId", wireType)
			}
			m.SignPolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignPolicyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenbtcMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZenbtcMetadata == nil {
				m.ZenbtcMetadata = &ZenBTCMetadata{}
			}
			if err := m.ZenbtcMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyReqResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyReqResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyReqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringPartySignatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringPartySignatures = append(m.KeyringPartySignatures, make([]byte, postIndex-iNdEx))
			copy(m.KeyringPartySignatures[len(m.KeyringPartySignatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPolicyId", wireType)
			}
			m.SignPolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignPolicyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenbtcMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZenbtcMetadata == nil {
				m.ZenbtcMetadata = &ZenBTCMetadata{}
			}
			if err := m.ZenbtcMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Key) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPolicyId", wireType)
			}
			m.SignPolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignPolicyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenbtcMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZenbtcMetadata == nil {
				m.ZenbtcMetadata = &ZenBTCMetadata{}
			}
			if err := m.ZenbtcMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkspaceAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyringAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyringAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPolicyId", wireType)
			}
			m.SignPolicyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignPolicyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZenbtcMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZenbtcMetadata == nil {
				m.ZenbtcMetadata = &ZenBTCMetadata{}
			}
			if err := m.ZenbtcMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZenBTCMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZenBTCMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZenBTCMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingMintTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingMintTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingMintTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			m.ChainType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingMintTransactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingMintTransactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingMintTransactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &PendingMintTransaction{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKey = fmt.Errorf("proto: unexpected end of group")
)
