// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zrchain/policy/sign_method_passkey.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SignMethodPasskey defines a structure containing passkey related data
type SignMethodPasskey struct {
	RawId             []byte `protobuf:"bytes,1,opt,name=raw_id,json=rawId,proto3" json:"raw_id,omitempty"`
	AttestationObject []byte `protobuf:"bytes,2,opt,name=attestation_object,json=attestationObject,proto3" json:"attestation_object,omitempty"`
	ClientDataJson    []byte `protobuf:"bytes,3,opt,name=client_data_json,json=clientDataJson,proto3" json:"client_data_json,omitempty"`
	Active            bool   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *SignMethodPasskey) Reset()         { *m = SignMethodPasskey{} }
func (m *SignMethodPasskey) String() string { return proto.CompactTextString(m) }
func (*SignMethodPasskey) ProtoMessage()    {}
func (*SignMethodPasskey) Descriptor() ([]byte, []int) {
	return fileDescriptor_7efcb040bef88868, []int{0}
}
func (m *SignMethodPasskey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignMethodPasskey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignMethodPasskey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignMethodPasskey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignMethodPasskey.Merge(m, src)
}
func (m *SignMethodPasskey) XXX_Size() int {
	return m.Size()
}
func (m *SignMethodPasskey) XXX_DiscardUnknown() {
	xxx_messageInfo_SignMethodPasskey.DiscardUnknown(m)
}

var xxx_messageInfo_SignMethodPasskey proto.InternalMessageInfo

func (m *SignMethodPasskey) GetRawId() []byte {
	if m != nil {
		return m.RawId
	}
	return nil
}

func (m *SignMethodPasskey) GetAttestationObject() []byte {
	if m != nil {
		return m.AttestationObject
	}
	return nil
}

func (m *SignMethodPasskey) GetClientDataJson() []byte {
	if m != nil {
		return m.ClientDataJson
	}
	return nil
}

func (m *SignMethodPasskey) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func init() {
	proto.RegisterType((*SignMethodPasskey)(nil), "zrchain.policy.SignMethodPasskey")
}

func init() {
	proto.RegisterFile("zrchain/policy/sign_method_passkey.proto", fileDescriptor_7efcb040bef88868)
}

var fileDescriptor_7efcb040bef88868 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd0, 0x3f, 0x4b, 0xc4, 0x30,
	0x18, 0xc7, 0xf1, 0xc6, 0x3f, 0x45, 0x82, 0x1c, 0x5e, 0x40, 0xe9, 0x14, 0x0e, 0xa7, 0x2e, 0xd7,
	0x0e, 0x82, 0xee, 0x22, 0x82, 0x82, 0xa8, 0xe7, 0x76, 0x4b, 0x48, 0xd3, 0xd0, 0xe6, 0xfe, 0xe4,
	0x29, 0xcd, 0x73, 0x77, 0xd6, 0x57, 0xe1, 0xee, 0x1b, 0x72, 0xbc, 0xd1, 0x51, 0xda, 0x37, 0x22,
	0xa4, 0x77, 0xe0, 0x98, 0xfc, 0x3e, 0xc3, 0xc3, 0x97, 0xc6, 0x1f, 0xb5, 0x2a, 0xa5, 0xb1, 0x69,
	0x05, 0x0b, 0xa3, 0x9a, 0xd4, 0x99, 0xc2, 0x8a, 0xa5, 0xc6, 0x12, 0x72, 0x51, 0x49, 0xe7, 0xe6,
	0xba, 0x49, 0xaa, 0x1a, 0x10, 0xd8, 0x60, 0x27, 0x93, 0x5e, 0x5e, 0x7e, 0x11, 0x3a, 0x7c, 0x33,
	0x85, 0x7d, 0xf2, 0xf8, 0xa5, 0xb7, 0xec, 0x9c, 0x86, 0xb5, 0xdc, 0x08, 0x93, 0x47, 0x64, 0x44,
	0xe2, 0xd3, 0xc9, 0x71, 0x2d, 0x37, 0x0f, 0x39, 0x1b, 0x53, 0x26, 0x11, 0xb5, 0x43, 0x89, 0x06,
	0xac, 0x80, 0x6c, 0xa6, 0x15, 0x46, 0x07, 0x9e, 0x0c, 0xff, 0x2d, 0xcf, 0x7e, 0x60, 0x31, 0x3d,
	0x53, 0x0b, 0xa3, 0x2d, 0x8a, 0x5c, 0xa2, 0x14, 0x33, 0x07, 0x36, 0x3a, 0xf4, 0x78, 0xd0, 0xff,
	0xdf, 0x49, 0x94, 0x8f, 0x0e, 0x2c, 0xbb, 0xa0, 0xa1, 0x54, 0x68, 0xd6, 0x3a, 0x3a, 0x1a, 0x91,
	0xf8, 0x64, 0xb2, 0x7b, 0xdd, 0xbe, 0x7e, 0xb7, 0x9c, 0x6c, 0x5b, 0x4e, 0x7e, 0x5b, 0x4e, 0x3e,
	0x3b, 0x1e, 0x6c, 0x3b, 0x1e, 0xfc, 0x74, 0x3c, 0x98, 0xde, 0x14, 0x06, 0xcb, 0x55, 0x96, 0x28,
	0x58, 0xa6, 0x53, 0x6d, 0x6b, 0x50, 0xf3, 0xf1, 0x3d, 0xac, 0x6c, 0xee, 0x0f, 0x48, 0xf7, 0x3d,
	0xd6, 0xd7, 0xe9, 0xfb, 0x3e, 0x0a, 0x36, 0x95, 0x76, 0x59, 0xe8, 0x3b, 0x5c, 0xfd, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xf0, 0x2d, 0x7b, 0x81, 0x33, 0x01, 0x00, 0x00,
}

func (m *SignMethodPasskey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignMethodPasskey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignMethodPasskey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClientDataJson) > 0 {
		i -= len(m.ClientDataJson)
		copy(dAtA[i:], m.ClientDataJson)
		i = encodeVarintSignMethodPasskey(dAtA, i, uint64(len(m.ClientDataJson)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AttestationObject) > 0 {
		i -= len(m.AttestationObject)
		copy(dAtA[i:], m.AttestationObject)
		i = encodeVarintSignMethodPasskey(dAtA, i, uint64(len(m.AttestationObject)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RawId) > 0 {
		i -= len(m.RawId)
		copy(dAtA[i:], m.RawId)
		i = encodeVarintSignMethodPasskey(dAtA, i, uint64(len(m.RawId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSignMethodPasskey(dAtA []byte, offset int, v uint64) int {
	offset -= sovSignMethodPasskey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignMethodPasskey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RawId)
	if l > 0 {
		n += 1 + l + sovSignMethodPasskey(uint64(l))
	}
	l = len(m.AttestationObject)
	if l > 0 {
		n += 1 + l + sovSignMethodPasskey(uint64(l))
	}
	l = len(m.ClientDataJson)
	if l > 0 {
		n += 1 + l + sovSignMethodPasskey(uint64(l))
	}
	if m.Active {
		n += 2
	}
	return n
}

func sovSignMethodPasskey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSignMethodPasskey(x uint64) (n int) {
	return sovSignMethodPasskey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignMethodPasskey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignMethodPasskey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignMethodPasskey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignMethodPasskey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignMethodPasskey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignMethodPasskey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSignMethodPasskey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawId = append(m.RawId[:0], dAtA[iNdEx:postIndex]...)
			if m.RawId == nil {
				m.RawId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttestationObject", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignMethodPasskey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignMethodPasskey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSignMethodPasskey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttestationObject = append(m.AttestationObject[:0], dAtA[iNdEx:postIndex]...)
			if m.AttestationObject == nil {
				m.AttestationObject = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientDataJson", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignMethodPasskey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSignMethodPasskey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSignMethodPasskey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientDataJson = append(m.ClientDataJson[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientDataJson == nil {
				m.ClientDataJson = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignMethodPasskey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSignMethodPasskey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSignMethodPasskey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignMethodPasskey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignMethodPasskey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignMethodPasskey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignMethodPasskey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSignMethodPasskey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSignMethodPasskey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSignMethodPasskey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSignMethodPasskey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignMethodPasskey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSignMethodPasskey = fmt.Errorf("proto: unexpected end of group")
)
