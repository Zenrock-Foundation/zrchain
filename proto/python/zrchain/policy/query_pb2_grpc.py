# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from zrchain.policy import query_pb2 as zrchain_dot_policy_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/zrchain.policy.Query/Params',
                request_serializer=zrchain_dot_policy_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=zrchain_dot_policy_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Actions = channel.unary_unary(
                '/zrchain.policy.Query/Actions',
                request_serializer=zrchain_dot_policy_dot_query__pb2.QueryActionsRequest.SerializeToString,
                response_deserializer=zrchain_dot_policy_dot_query__pb2.QueryActionsResponse.FromString,
                )
        self.Policies = channel.unary_unary(
                '/zrchain.policy.Query/Policies',
                request_serializer=zrchain_dot_policy_dot_query__pb2.QueryPoliciesRequest.SerializeToString,
                response_deserializer=zrchain_dot_policy_dot_query__pb2.QueryPoliciesResponse.FromString,
                )
        self.PolicyById = channel.unary_unary(
                '/zrchain.policy.Query/PolicyById',
                request_serializer=zrchain_dot_policy_dot_query__pb2.QueryPolicyByIdRequest.SerializeToString,
                response_deserializer=zrchain_dot_policy_dot_query__pb2.QueryPolicyByIdResponse.FromString,
                )
        self.SignMethodsByAddress = channel.unary_unary(
                '/zrchain.policy.Query/SignMethodsByAddress',
                request_serializer=zrchain_dot_policy_dot_query__pb2.QuerySignMethodsByAddressRequest.SerializeToString,
                response_deserializer=zrchain_dot_policy_dot_query__pb2.QuerySignMethodsByAddressResponse.FromString,
                )
        self.PoliciesByCreator = channel.unary_unary(
                '/zrchain.policy.Query/PoliciesByCreator',
                request_serializer=zrchain_dot_policy_dot_query__pb2.QueryPoliciesByCreatorRequest.SerializeToString,
                response_deserializer=zrchain_dot_policy_dot_query__pb2.QueryPoliciesByCreatorResponse.FromString,
                )
        self.ActionDetailsById = channel.unary_unary(
                '/zrchain.policy.Query/ActionDetailsById',
                request_serializer=zrchain_dot_policy_dot_query__pb2.QueryActionDetailsByIdRequest.SerializeToString,
                response_deserializer=zrchain_dot_policy_dot_query__pb2.QueryActionDetailsByIdResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Parameters queries the parameters of the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Actions(self, request, context):
        """Queries a list of Actions items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Policies(self, request, context):
        """Queries a list of Policies items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PolicyById(self, request, context):
        """Queries a list of PolicyById items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignMethodsByAddress(self, request, context):
        """Queries a list of SignMethodsByAddress items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PoliciesByCreator(self, request, context):
        """Queries a list of PoliciesByCreator items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActionDetailsById(self, request, context):
        """Queries a list of ActionDetailsById items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=zrchain_dot_policy_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=zrchain_dot_policy_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Actions': grpc.unary_unary_rpc_method_handler(
                    servicer.Actions,
                    request_deserializer=zrchain_dot_policy_dot_query__pb2.QueryActionsRequest.FromString,
                    response_serializer=zrchain_dot_policy_dot_query__pb2.QueryActionsResponse.SerializeToString,
            ),
            'Policies': grpc.unary_unary_rpc_method_handler(
                    servicer.Policies,
                    request_deserializer=zrchain_dot_policy_dot_query__pb2.QueryPoliciesRequest.FromString,
                    response_serializer=zrchain_dot_policy_dot_query__pb2.QueryPoliciesResponse.SerializeToString,
            ),
            'PolicyById': grpc.unary_unary_rpc_method_handler(
                    servicer.PolicyById,
                    request_deserializer=zrchain_dot_policy_dot_query__pb2.QueryPolicyByIdRequest.FromString,
                    response_serializer=zrchain_dot_policy_dot_query__pb2.QueryPolicyByIdResponse.SerializeToString,
            ),
            'SignMethodsByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.SignMethodsByAddress,
                    request_deserializer=zrchain_dot_policy_dot_query__pb2.QuerySignMethodsByAddressRequest.FromString,
                    response_serializer=zrchain_dot_policy_dot_query__pb2.QuerySignMethodsByAddressResponse.SerializeToString,
            ),
            'PoliciesByCreator': grpc.unary_unary_rpc_method_handler(
                    servicer.PoliciesByCreator,
                    request_deserializer=zrchain_dot_policy_dot_query__pb2.QueryPoliciesByCreatorRequest.FromString,
                    response_serializer=zrchain_dot_policy_dot_query__pb2.QueryPoliciesByCreatorResponse.SerializeToString,
            ),
            'ActionDetailsById': grpc.unary_unary_rpc_method_handler(
                    servicer.ActionDetailsById,
                    request_deserializer=zrchain_dot_policy_dot_query__pb2.QueryActionDetailsByIdRequest.FromString,
                    response_serializer=zrchain_dot_policy_dot_query__pb2.QueryActionDetailsByIdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zrchain.policy.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.policy.Query/Params',
            zrchain_dot_policy_dot_query__pb2.QueryParamsRequest.SerializeToString,
            zrchain_dot_policy_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Actions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.policy.Query/Actions',
            zrchain_dot_policy_dot_query__pb2.QueryActionsRequest.SerializeToString,
            zrchain_dot_policy_dot_query__pb2.QueryActionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Policies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.policy.Query/Policies',
            zrchain_dot_policy_dot_query__pb2.QueryPoliciesRequest.SerializeToString,
            zrchain_dot_policy_dot_query__pb2.QueryPoliciesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PolicyById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.policy.Query/PolicyById',
            zrchain_dot_policy_dot_query__pb2.QueryPolicyByIdRequest.SerializeToString,
            zrchain_dot_policy_dot_query__pb2.QueryPolicyByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignMethodsByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.policy.Query/SignMethodsByAddress',
            zrchain_dot_policy_dot_query__pb2.QuerySignMethodsByAddressRequest.SerializeToString,
            zrchain_dot_policy_dot_query__pb2.QuerySignMethodsByAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PoliciesByCreator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.policy.Query/PoliciesByCreator',
            zrchain_dot_policy_dot_query__pb2.QueryPoliciesByCreatorRequest.SerializeToString,
            zrchain_dot_policy_dot_query__pb2.QueryPoliciesByCreatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActionDetailsById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zrchain.policy.Query/ActionDetailsById',
            zrchain_dot_policy_dot_query__pb2.QueryActionDetailsByIdRequest.SerializeToString,
            zrchain_dot_policy_dot_query__pb2.QueryActionDetailsByIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
