// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package validation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// CreateValidator defines a method for creating a new validator.
	CreateValidator(ctx context.Context, in *MsgCreateValidator, opts ...grpc.CallOption) (*MsgCreateValidatorResponse, error)
	// EditValidator defines a method for editing an existing validator.
	EditValidator(ctx context.Context, in *MsgEditValidator, opts ...grpc.CallOption) (*MsgEditValidatorResponse, error)
	// Delegate defines a method for performing a delegation of coins
	// from a delegator to a validator.
	Delegate(ctx context.Context, in *MsgDelegate, opts ...grpc.CallOption) (*MsgDelegateResponse, error)
	// BeginRedelegate defines a method for performing a redelegation
	// of coins from a delegator and source validator to a destination validator.
	BeginRedelegate(ctx context.Context, in *MsgBeginRedelegate, opts ...grpc.CallOption) (*MsgBeginRedelegateResponse, error)
	// Undelegate defines a method for performing an undelegation from a
	// delegate and a validator.
	Undelegate(ctx context.Context, in *MsgUndelegate, opts ...grpc.CallOption) (*MsgUndelegateResponse, error)
	// Since: cosmos-sdk 0.46
	CancelUnbondingDelegation(ctx context.Context, in *MsgCancelUnbondingDelegation, opts ...grpc.CallOption) (*MsgCancelUnbondingDelegationResponse, error)
	// UpdateParams defines an operation for updating the x/staking module
	// parameters.
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// UpdateHVParams defines an operation for updating the x/validation module
	// parameters with Hybrid Validation parameters.
	UpdateHVParams(ctx context.Context, in *MsgUpdateHVParams, opts ...grpc.CallOption) (*MsgUpdateHVParamsResponse, error)
	// TriggerEventBackfill defines an operation for triggering a backfill event for a specific transaction and event type.
	TriggerEventBackfill(ctx context.Context, in *MsgTriggerEventBackfill, opts ...grpc.CallOption) (*MsgTriggerEventBackfillResponse, error)
	// RequestHeaderBackfill requests a specific Bitcoin header by height.
	// The header will be fetched by sidecars and populated via normal ABCI flow.
	RequestHeaderBackfill(ctx context.Context, in *MsgRequestHeaderBackfill, opts ...grpc.CallOption) (*MsgRequestHeaderBackfillResponse, error)
	// ManuallyInputBitcoinHeader injects a Bitcoin header directly into consensus state.
	ManuallyInputBitcoinHeader(ctx context.Context, in *MsgManuallyInputBitcoinHeader, opts ...grpc.CallOption) (*MsgManuallyInputBitcoinHeaderResponse, error)
	// ManuallyInputZcashHeader injects a Zcash header directly into consensus state.
	ManuallyInputZcashHeader(ctx context.Context, in *MsgManuallyInputZcashHeader, opts ...grpc.CallOption) (*MsgManuallyInputZcashHeaderResponse, error)
	// AddToBedrockValSet adds a validator to the bedrock validator set.
	AddToBedrockValSet(ctx context.Context, in *MsgAddToBedrockValSet, opts ...grpc.CallOption) (*MsgAddToBedrockValSetResponse, error)
	// RemoveFromBedrockValSet removes a validator from the bedrock validator set.
	RemoveFromBedrockValSet(ctx context.Context, in *MsgRemoveFromBedrockValSet, opts ...grpc.CallOption) (*MsgRemoveFromBedrockValSetResponse, error)
	// AdvanceSolanaNonce constructs and dispatches a maintenance transaction that
	// advances a configured Solana durable nonce account using a supplied recent
	// blockhash.
	AdvanceSolanaNonce(ctx context.Context, in *MsgAdvanceSolanaNonce, opts ...grpc.CallOption) (*MsgAdvanceSolanaNonceResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateValidator(ctx context.Context, in *MsgCreateValidator, opts ...grpc.CallOption) (*MsgCreateValidatorResponse, error) {
	out := new(MsgCreateValidatorResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/CreateValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditValidator(ctx context.Context, in *MsgEditValidator, opts ...grpc.CallOption) (*MsgEditValidatorResponse, error) {
	out := new(MsgEditValidatorResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/EditValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Delegate(ctx context.Context, in *MsgDelegate, opts ...grpc.CallOption) (*MsgDelegateResponse, error) {
	out := new(MsgDelegateResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/Delegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BeginRedelegate(ctx context.Context, in *MsgBeginRedelegate, opts ...grpc.CallOption) (*MsgBeginRedelegateResponse, error) {
	out := new(MsgBeginRedelegateResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/BeginRedelegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Undelegate(ctx context.Context, in *MsgUndelegate, opts ...grpc.CallOption) (*MsgUndelegateResponse, error) {
	out := new(MsgUndelegateResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/Undelegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelUnbondingDelegation(ctx context.Context, in *MsgCancelUnbondingDelegation, opts ...grpc.CallOption) (*MsgCancelUnbondingDelegationResponse, error) {
	out := new(MsgCancelUnbondingDelegationResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/CancelUnbondingDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateHVParams(ctx context.Context, in *MsgUpdateHVParams, opts ...grpc.CallOption) (*MsgUpdateHVParamsResponse, error) {
	out := new(MsgUpdateHVParamsResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/UpdateHVParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TriggerEventBackfill(ctx context.Context, in *MsgTriggerEventBackfill, opts ...grpc.CallOption) (*MsgTriggerEventBackfillResponse, error) {
	out := new(MsgTriggerEventBackfillResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/TriggerEventBackfill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestHeaderBackfill(ctx context.Context, in *MsgRequestHeaderBackfill, opts ...grpc.CallOption) (*MsgRequestHeaderBackfillResponse, error) {
	out := new(MsgRequestHeaderBackfillResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/RequestHeaderBackfill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ManuallyInputBitcoinHeader(ctx context.Context, in *MsgManuallyInputBitcoinHeader, opts ...grpc.CallOption) (*MsgManuallyInputBitcoinHeaderResponse, error) {
	out := new(MsgManuallyInputBitcoinHeaderResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/ManuallyInputBitcoinHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ManuallyInputZcashHeader(ctx context.Context, in *MsgManuallyInputZcashHeader, opts ...grpc.CallOption) (*MsgManuallyInputZcashHeaderResponse, error) {
	out := new(MsgManuallyInputZcashHeaderResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/ManuallyInputZcashHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddToBedrockValSet(ctx context.Context, in *MsgAddToBedrockValSet, opts ...grpc.CallOption) (*MsgAddToBedrockValSetResponse, error) {
	out := new(MsgAddToBedrockValSetResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/AddToBedrockValSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveFromBedrockValSet(ctx context.Context, in *MsgRemoveFromBedrockValSet, opts ...grpc.CallOption) (*MsgRemoveFromBedrockValSetResponse, error) {
	out := new(MsgRemoveFromBedrockValSetResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/RemoveFromBedrockValSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AdvanceSolanaNonce(ctx context.Context, in *MsgAdvanceSolanaNonce, opts ...grpc.CallOption) (*MsgAdvanceSolanaNonceResponse, error) {
	out := new(MsgAdvanceSolanaNonceResponse)
	err := c.cc.Invoke(ctx, "/zrchain.validation.Msg/AdvanceSolanaNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// CreateValidator defines a method for creating a new validator.
	CreateValidator(context.Context, *MsgCreateValidator) (*MsgCreateValidatorResponse, error)
	// EditValidator defines a method for editing an existing validator.
	EditValidator(context.Context, *MsgEditValidator) (*MsgEditValidatorResponse, error)
	// Delegate defines a method for performing a delegation of coins
	// from a delegator to a validator.
	Delegate(context.Context, *MsgDelegate) (*MsgDelegateResponse, error)
	// BeginRedelegate defines a method for performing a redelegation
	// of coins from a delegator and source validator to a destination validator.
	BeginRedelegate(context.Context, *MsgBeginRedelegate) (*MsgBeginRedelegateResponse, error)
	// Undelegate defines a method for performing an undelegation from a
	// delegate and a validator.
	Undelegate(context.Context, *MsgUndelegate) (*MsgUndelegateResponse, error)
	// Since: cosmos-sdk 0.46
	CancelUnbondingDelegation(context.Context, *MsgCancelUnbondingDelegation) (*MsgCancelUnbondingDelegationResponse, error)
	// UpdateParams defines an operation for updating the x/staking module
	// parameters.
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// UpdateHVParams defines an operation for updating the x/validation module
	// parameters with Hybrid Validation parameters.
	UpdateHVParams(context.Context, *MsgUpdateHVParams) (*MsgUpdateHVParamsResponse, error)
	// TriggerEventBackfill defines an operation for triggering a backfill event for a specific transaction and event type.
	TriggerEventBackfill(context.Context, *MsgTriggerEventBackfill) (*MsgTriggerEventBackfillResponse, error)
	// RequestHeaderBackfill requests a specific Bitcoin header by height.
	// The header will be fetched by sidecars and populated via normal ABCI flow.
	RequestHeaderBackfill(context.Context, *MsgRequestHeaderBackfill) (*MsgRequestHeaderBackfillResponse, error)
	// ManuallyInputBitcoinHeader injects a Bitcoin header directly into consensus state.
	ManuallyInputBitcoinHeader(context.Context, *MsgManuallyInputBitcoinHeader) (*MsgManuallyInputBitcoinHeaderResponse, error)
	// ManuallyInputZcashHeader injects a Zcash header directly into consensus state.
	ManuallyInputZcashHeader(context.Context, *MsgManuallyInputZcashHeader) (*MsgManuallyInputZcashHeaderResponse, error)
	// AddToBedrockValSet adds a validator to the bedrock validator set.
	AddToBedrockValSet(context.Context, *MsgAddToBedrockValSet) (*MsgAddToBedrockValSetResponse, error)
	// RemoveFromBedrockValSet removes a validator from the bedrock validator set.
	RemoveFromBedrockValSet(context.Context, *MsgRemoveFromBedrockValSet) (*MsgRemoveFromBedrockValSetResponse, error)
	// AdvanceSolanaNonce constructs and dispatches a maintenance transaction that
	// advances a configured Solana durable nonce account using a supplied recent
	// blockhash.
	AdvanceSolanaNonce(context.Context, *MsgAdvanceSolanaNonce) (*MsgAdvanceSolanaNonceResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateValidator(context.Context, *MsgCreateValidator) (*MsgCreateValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidator not implemented")
}
func (UnimplementedMsgServer) EditValidator(context.Context, *MsgEditValidator) (*MsgEditValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditValidator not implemented")
}
func (UnimplementedMsgServer) Delegate(context.Context, *MsgDelegate) (*MsgDelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegate not implemented")
}
func (UnimplementedMsgServer) BeginRedelegate(context.Context, *MsgBeginRedelegate) (*MsgBeginRedelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginRedelegate not implemented")
}
func (UnimplementedMsgServer) Undelegate(context.Context, *MsgUndelegate) (*MsgUndelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Undelegate not implemented")
}
func (UnimplementedMsgServer) CancelUnbondingDelegation(context.Context, *MsgCancelUnbondingDelegation) (*MsgCancelUnbondingDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUnbondingDelegation not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) UpdateHVParams(context.Context, *MsgUpdateHVParams) (*MsgUpdateHVParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHVParams not implemented")
}
func (UnimplementedMsgServer) TriggerEventBackfill(context.Context, *MsgTriggerEventBackfill) (*MsgTriggerEventBackfillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerEventBackfill not implemented")
}
func (UnimplementedMsgServer) RequestHeaderBackfill(context.Context, *MsgRequestHeaderBackfill) (*MsgRequestHeaderBackfillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestHeaderBackfill not implemented")
}
func (UnimplementedMsgServer) ManuallyInputBitcoinHeader(context.Context, *MsgManuallyInputBitcoinHeader) (*MsgManuallyInputBitcoinHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManuallyInputBitcoinHeader not implemented")
}
func (UnimplementedMsgServer) ManuallyInputZcashHeader(context.Context, *MsgManuallyInputZcashHeader) (*MsgManuallyInputZcashHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManuallyInputZcashHeader not implemented")
}
func (UnimplementedMsgServer) AddToBedrockValSet(context.Context, *MsgAddToBedrockValSet) (*MsgAddToBedrockValSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBedrockValSet not implemented")
}
func (UnimplementedMsgServer) RemoveFromBedrockValSet(context.Context, *MsgRemoveFromBedrockValSet) (*MsgRemoveFromBedrockValSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBedrockValSet not implemented")
}
func (UnimplementedMsgServer) AdvanceSolanaNonce(context.Context, *MsgAdvanceSolanaNonce) (*MsgAdvanceSolanaNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvanceSolanaNonce not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/CreateValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateValidator(ctx, req.(*MsgCreateValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/EditValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditValidator(ctx, req.(*MsgEditValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Delegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Delegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/Delegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Delegate(ctx, req.(*MsgDelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BeginRedelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBeginRedelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BeginRedelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/BeginRedelegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BeginRedelegate(ctx, req.(*MsgBeginRedelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Undelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUndelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Undelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/Undelegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Undelegate(ctx, req.(*MsgUndelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelUnbondingDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelUnbondingDelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelUnbondingDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/CancelUnbondingDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelUnbondingDelegation(ctx, req.(*MsgCancelUnbondingDelegation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateHVParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateHVParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateHVParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/UpdateHVParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateHVParams(ctx, req.(*MsgUpdateHVParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TriggerEventBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTriggerEventBackfill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TriggerEventBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/TriggerEventBackfill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TriggerEventBackfill(ctx, req.(*MsgTriggerEventBackfill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestHeaderBackfill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestHeaderBackfill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestHeaderBackfill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/RequestHeaderBackfill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestHeaderBackfill(ctx, req.(*MsgRequestHeaderBackfill))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ManuallyInputBitcoinHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgManuallyInputBitcoinHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ManuallyInputBitcoinHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/ManuallyInputBitcoinHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ManuallyInputBitcoinHeader(ctx, req.(*MsgManuallyInputBitcoinHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ManuallyInputZcashHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgManuallyInputZcashHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ManuallyInputZcashHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/ManuallyInputZcashHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ManuallyInputZcashHeader(ctx, req.(*MsgManuallyInputZcashHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddToBedrockValSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddToBedrockValSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddToBedrockValSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/AddToBedrockValSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddToBedrockValSet(ctx, req.(*MsgAddToBedrockValSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveFromBedrockValSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveFromBedrockValSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveFromBedrockValSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/RemoveFromBedrockValSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveFromBedrockValSet(ctx, req.(*MsgRemoveFromBedrockValSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AdvanceSolanaNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAdvanceSolanaNonce)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AdvanceSolanaNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zrchain.validation.Msg/AdvanceSolanaNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AdvanceSolanaNonce(ctx, req.(*MsgAdvanceSolanaNonce))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zrchain.validation.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateValidator",
			Handler:    _Msg_CreateValidator_Handler,
		},
		{
			MethodName: "EditValidator",
			Handler:    _Msg_EditValidator_Handler,
		},
		{
			MethodName: "Delegate",
			Handler:    _Msg_Delegate_Handler,
		},
		{
			MethodName: "BeginRedelegate",
			Handler:    _Msg_BeginRedelegate_Handler,
		},
		{
			MethodName: "Undelegate",
			Handler:    _Msg_Undelegate_Handler,
		},
		{
			MethodName: "CancelUnbondingDelegation",
			Handler:    _Msg_CancelUnbondingDelegation_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UpdateHVParams",
			Handler:    _Msg_UpdateHVParams_Handler,
		},
		{
			MethodName: "TriggerEventBackfill",
			Handler:    _Msg_TriggerEventBackfill_Handler,
		},
		{
			MethodName: "RequestHeaderBackfill",
			Handler:    _Msg_RequestHeaderBackfill_Handler,
		},
		{
			MethodName: "ManuallyInputBitcoinHeader",
			Handler:    _Msg_ManuallyInputBitcoinHeader_Handler,
		},
		{
			MethodName: "ManuallyInputZcashHeader",
			Handler:    _Msg_ManuallyInputZcashHeader_Handler,
		},
		{
			MethodName: "AddToBedrockValSet",
			Handler:    _Msg_AddToBedrockValSet_Handler,
		},
		{
			MethodName: "RemoveFromBedrockValSet",
			Handler:    _Msg_RemoveFromBedrockValSet_Handler,
		},
		{
			MethodName: "AdvanceSolanaNonce",
			Handler:    _Msg_AdvanceSolanaNonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zrchain/validation/tx.proto",
}
